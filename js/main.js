// Generated by CoffeeScript 1.6.2
(function() {
  var App;

  App = (function() {
    function App() {
      this.vars();
      this.initScroll();
      this.initController();
      this.buildAnimations();
      this.initParallax();
    }

    App.prototype.vars = function() {
      this.$main = $('#js-main');
      return this.scrollPos = 0;
    };

    App.prototype.initController = function() {
      return this.controller = $.superscrollorama({
        triggerAtCenter: false,
        playoutAnimations: true
      });
    };

    App.prototype.initScroll = function() {
      var it;

      this.scroller = new IScroll('#js-main', {
        probeType: 3,
        mouseWheel: true
      });
      document.addEventListener('touchmove', (function(e) {
        return e.preventDefault();
      }), false);
      it = this;
      this.scroller.on('scroll', function() {
        return it.updateScrollPos(this, it);
      });
      return this.scroller.on('scrollEnd', function() {
        return it.updateScrollPos(this, it);
      });
    };

    App.prototype.initParallax = function() {
      return this.$scence = this.$('#js-curtain1').parallax();
    };

    App.prototype.updateScrollPos = function(that, it) {
      return it.controller.setScrollContainerOffset(0, -(that.y >> 0)).triggerCheckAnim(true);
    };

    App.prototype.buildAnimations = function() {
      var $el, $left, $leftEls, $right, $rightEls, el, i, rotateDegree, rotateElsCountLeft, start, _i, _j, _len, _ref, _ref1;

      this.curtainTween1 = TweenMax.to(this.$('.curtain-l'), .75, {
        css: {
          top: '-100%'
        },
        onUpdate: StatSocial.helpers.bind(this.onUpdate, this)
      });
      this.curtainTween2 = TweenMax.to(this.$('.curtain2-l'), .75, {
        css: {
          top: '-22px',
          y: 0
        }
      });
      this.controller.addTween(1, this.curtainTween1, 2500);
      this.controller.addTween(1, this.curtainTween2, 2500);
      $left = this.$('#js-curtain2-left-side');
      $right = this.$('#js-curtain2-right-side');
      $leftEls = $left.find('.curtain2-section-lh');
      $rightEls = $right.find('.curtain2-section-lh');
      start = 8000;
      rotateDegree = 5;
      rotateElsCountLeft = Math.min($leftEls.length, 10);
      for (i = _i = _ref = $leftEls.length, _ref1 = $leftEls.length - rotateElsCountLeft; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        $el = $($leftEls.eq(i));
        this.controller.addTween(start - (i * 300), TweenMax.to($el, .75, {
          css: {
            rotation: rotateDegree,
            transformOrigin: 'left top'
          }
        }), 2500);
      }
      for (i = _j = 0, _len = $rightEls.length; _j < _len; i = ++_j) {
        el = $rightEls[i];
        $el = $(el);
        this.controller.addTween(start - (($rightEls.length - i) * 300), TweenMax.to($el, .75, {
          css: {
            rotation: -rotateDegree,
            transformOrigin: 'right top'
          }
        }), 2500);
      }
      this.controller.addTween(start / 2, TweenMax.to($left, .75, {
        css: {
          left: '-100%'
        }
      }), 20000);
      return this.controller.addTween(start / 2, TweenMax.to($right, .75, {
        css: {
          left: '100%'
        }
      }), 20000);
    };

    App.prototype.$ = function(selector) {
      return this.$main.find(selector);
    };

    App.prototype.onUpdate = function() {
      if (this.curtainTween1.totalProgress() >= 1) {
        this.isFirstCurtainParallax && this.$scence.parallax('disable');
        this.isFirstCurtainParallax = false;
        return this.$scence.hide();
      } else {
        !this.isFirstCurtainParallax && this.$scence.parallax('enable');
        this.isFirstCurtainParallax = true;
        return this.$scence.show();
      }
    };

    return App;

  })();

  new App;

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
