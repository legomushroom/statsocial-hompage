// Generated by CoffeeScript 1.6.2
(function() {
  var App;

  App = (function() {
    function App() {
      this.vars();
      this.initScroll();
      this.initController();
      this.buildAnimations();
      this.listenKeys();
      this.initMap();
      this.playSuggest();
      this.addCssClasses();
      this.loopSequence = StatSocial.helpers.bind(this.loopSequence, this);
    }

    App.prototype.vars = function() {
      this.$main = $('#js-main');
      this.$body = $(document.body);
      this.scrollPos = 0;
      this.$window = $(window);
      this.$window.height();
      this.$script1 = this.$('#js-script1');
      this.$script2 = this.$('#js-script2');
      this.$scence = this.$('#js-curtain1');
      this.$scence2 = this.$('#js-curtain2');
      this.$scence3 = this.$('#js-curtain3');
      this.$carousel = this.$('#js-carousel');
      this.$plane1 = this.$('#js-plane1');
      this.$plane2 = this.$('#js-plane2');
      this.$plane3 = this.$('#js-plane3');
      this.$plane4 = this.$('#js-plane4');
      this.$ground = this.$('#js-ground');
      this.$scrollSuggest = $('#js-scroll-suggest');
      this.$mouseSuggest = $('#js-scroll-suggest-mouse');
      this.$keysSuggest = $('#js-scroll-suggest-keys');
      this.$touchSuggest = $('#js-scroll-suggest-touch');
      this.$pagesBtns = $('#js-pages-btns');
      this.$playBtn = $('#js-pages-btns-play');
      this.$mainMenu = $('#js-main-menu');
      this.$menuSuggest = $('#js-menu-suggest');
      this.prevPlaneProgress = -1;
      this.maxScroll = -19320;
      this.readDelay = 3000;
      this.startPoints = [];
      return this.readDelayItems = [3, 4, 5, 6, 8, 10];
    };

    App.prototype.hideMenu = function() {
      this.$mainMenu.addClass('is-hidden');
      this.$menuSuggest.removeClass('h-g-i');
      return this.isMenuShow = false;
    };

    App.prototype.showMenu = function() {
      this.$mainMenu.removeClass('is-hidden');
      this.$menuSuggest.addClass('h-g-i');
      return this.isMenuShow = true;
    };

    App.prototype.initController = function() {
      return this.controller = $.superscrollorama({
        triggerAtCenter: false,
        playoutAnimations: true
      });
    };

    App.prototype.loopSequence = function() {
      var num,
        _this = this;

      num = this.setCurrentScenseNum(this.currSequenceTweenNum + 1);
      this.currSequenceTween = TweenMax.to(this.scroller, this.startPoints[this.currSequenceTweenNum].dur, {
        y: -this.startPoints[this.currSequenceTweenNum].start,
        onUpdate: (function() {
          return _this.controller.setScrollContainerOffset(0, -_this.scroller.y).triggerCheckAnim(true);
        }),
        onComplete: function() {
          if (_this.currSequenceTweenNum < _this.startPoints.length) {
            _this.sequenceLoopTimer = setTimeout(_this.loopSequence, _this.startPoints[_this.currSequenceTweenNum].delay || 0);
            if (_this.currSequenceTweenNum === _this.startPoints.length - 1) {
              return _this.stopLoopSequence();
            }
          }
        }
      });
      return this.$playBtn.addClass('is-playing');
    };

    App.prototype.addCssClasses = function() {
      this.$mainMenu.addClass('is-allow-transition');
      if (StatSocial.helpers.isMobile()) {
        return $(document.body).addClass('at-mobiles');
      }
    };

    App.prototype.stopLoopSequence = function() {
      var _ref;

      clearTimeout(this.sequenceLoopTimer);
      if ((_ref = this.currSequenceTween) != null) {
        _ref.kill();
      }
      this.play = false;
      return this.$playBtn.removeClass('is-playing');
    };

    App.prototype.setCurrentScenseNum = function(num) {
      if ((this.currSequenceTweenNum === num) || (num >= this.startPoints.length)) {
        return num;
      }
      this.currSequenceTweenNum = num;
      this.$pagesBtnsChildren.filter('.is-check').removeClass('is-check');
      this.$pagesBtnsChildren.eq(num + 1).addClass('is-check');
      return num;
    };

    App.prototype.initMap = function() {
      var i, it, point, _i, _len, _ref,
        _this = this;

      _ref = this.startPoints;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        point = _ref[i];
        this.$pagesBtns.append($("<div class='pages-btns__btn " + (i === 0 ? 'is-check' : null) + "' />"));
      }
      this.$pagesBtnsChildren = this.$pagesBtns.children();
      this.$pagesBtns.on('click', '.pages-btns__btn', function(e) {
        var num;

        _this.stopLoopSequence();
        num = $(e.target).index() - 1;
        _this.currSequenceTween = TweenMax.to(_this.scroller, _this.startPoints[num].dur, {
          y: -_this.startPoints[num].start,
          onUpdate: (function() {
            return _this.controller.setScrollContainerOffset(0, -_this.scroller.y).triggerCheckAnim(true);
          })
        });
        return _this.setCurrentScenseNum(num);
      });
      it = this;
      return this.$pagesBtns.on('click', '#js-pages-btns-play', function(e) {
        var $it;

        $it = $(this);
        it.play = !this.play;
        $it.toggleClass('is-playing', it.play);
        if (it.play && (it.currSequenceTweenNum < it.startPoints.length - 1)) {
          return it.loopSequence();
        } else {
          return it.stopLoopSequence();
        }
      });
    };

    App.prototype.playSuggest = function() {
      var currBlock,
        _this = this;

      this.$scrollSuggest.show();
      if (!StatSocial.helpers.isMobile()) {
        this.$keysSuggest.hide();
        this.$mouseSuggest.show();
        currBlock = this.$mouseSuggest;
        return this.suggestInterval = setInterval(function() {
          if (currBlock === _this.$mouseSuggest) {
            _this.$mouseSuggest.hide();
            _this.$keysSuggest.fadeIn();
            return currBlock = _this.$keysSuggest;
          } else {
            _this.$keysSuggest.hide();
            _this.$mouseSuggest.fadeIn();
            return currBlock = _this.$mouseSuggest;
          }
        }, 5000);
      } else {
        this.$touchSuggest.show();
        this.$mouseSuggest.hide();
        return this.$keysSuggest.hide();
      }
    };

    App.prototype.stopSuggest = function() {
      clearInterval(this.suggestInterval);
      this.$keysSuggest.hide();
      this.$mouseSuggest.hide();
      this.$touchSuggest.hide();
      return this.$scrollSuggest.hide();
    };

    App.prototype.listenKeys = function() {
      var $document, currTweenKeydown, scrollStep, stepSize,
        _this = this;

      scrollStep = this.frameDurationTime / 4;
      this.play = false;
      this.currSequenceTweenNum = 0;
      $document = $(document);
      $document.on('keyup', function(e) {
        switch (e.keyCode) {
          case 32:
            _this.play = !_this.play;
            if (_this.play && (_this.currSequenceTweenNum < _this.startPoints.length - 1)) {
              return _this.loopSequence();
            } else {
              return _this.stopLoopSequence();
            }
        }
      });
      currTweenKeydown = null;
      stepSize = this.frameDurationTime;
      $document.on('keydown', function(e) {
        switch (e.keyCode) {
          case 39:
          case 40:
            _this.setCurrentScenseNum(_this.currSequenceTweenNum < _this.startPoints.length - 1 ? _this.currSequenceTweenNum + 1 : _this.currSequenceTweenNum);
            _this.stopLoopSequence();
            return _this.currSequenceTween = TweenMax.to(_this.scroller, _this.startPoints[_this.currSequenceTweenNum].dur, {
              y: -_this.startPoints[_this.currSequenceTweenNum].start,
              onUpdate: (function() {
                return _this.controller.setScrollContainerOffset(0, -_this.scroller.y).triggerCheckAnim(true);
              })
            });
          case 37:
          case 38:
            _this.setCurrentScenseNum(_this.currSequenceTweenNum > 0 ? _this.currSequenceTweenNum - 1 : _this.currSequenceTweenNum);
            _this.stopLoopSequence();
            return _this.currSequenceTween = TweenMax.to(_this.scroller, _this.startPoints[_this.currSequenceTweenNum + 1].dur, {
              y: -_this.startPoints[_this.currSequenceTweenNum].start,
              onUpdate: (function() {
                return _this.controller.setScrollContainerOffset(0, -_this.scroller.y).triggerCheckAnim(true);
              })
            });
        }
      });
      $('#js-menu-btn').on('click', function(e) {
        if ((_this.isMenuShow = !_this.isMenuShow)) {
          _this.showMenu();
        } else {
          _this.hideMenu();
        }
        return e.stopPropagation();
      });
      return $(document.body).on('click', function(e) {
        _this.hideMenu();
        return e.stopPropagation();
      });
    };

    App.prototype.initScroll = function() {
      var it;

      this.scroller = new IScroll('#js-main', {
        probeType: 3,
        mouseWheel: true,
        deceleration: 0.001
      });
      document.addEventListener('touchmove', (function(e) {
        return e.preventDefault();
      }), false);
      it = this;
      this.scroller.on('scroll', function() {
        return it.updateScrollPos(this, it);
      });
      return this.scroller.on('scrollEnd', function() {
        return it.updateScrollPos(this, it);
      });
    };

    App.prototype.updateScrollPos = function(that, it) {
      this.stopLoopSequence();
      (that.y < it.maxScroll) && (that.y = it.maxScroll);
      it.controller.setScrollContainerOffset(0, -(that.y >> 0)).triggerCheckAnim(true);
      it.calcCurrentScenseNum(that);
      return it.isMenuShow && it.hideMenu();
    };

    App.prototype.calcCurrentScenseNum = function(that) {
      var i, num, point, _i, _len, _ref;

      num = 0;
      _ref = this.startPoints;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        point = _ref[i];
        if (-that.y >= point.start) {
          num = i;
        }
      }
      return this.setCurrentScenseNum(num);
    };

    App.prototype.onBuildingsUpdate = function() {
      var method;

      method = this.curtainTextTween2.totalProgress() >= 1 ? 'hide' : 'show';
      return this.$scence[method]();
    };

    App.prototype.scrollStart = function() {
      this.stopSuggest();
      return this.$menuSuggest.addClass('is-transparent').hide();
    };

    App.prototype.scrollReverseStart = function() {
      this.playSuggest();
      return this.$menuSuggest.removeClass('is-transparent').show();
    };

    App.prototype.scrollEnd = function() {
      return this.$menuSuggest.show();
    };

    App.prototype.scrollReverseEnd = function() {
      return this.$menuSuggest.hide();
    };

    App.prototype.buildAnimations = function() {
      var $animas, $buildings, $bush, $bushes, $clip, $cloudParts, $clouds, $el, $iconBanner, $quoCurtain, $ticket1, $ticket2, $tickets, bush, dur, i, it, planeTween1, planeTween2, planeTween3, planeTween4, start, _i, _j, _len, _ref,
        _this = this;

      $quoCurtain = this.$('#js-quo-curtain');
      $tickets = this.$('#js-tickets');
      $ticket1 = this.$('#js-ticket1');
      $ticket2 = this.$('#js-ticket2');
      $clip = this.$('#js-clip');
      this.frameDurationTime = 1000;
      this.curtainTween1 = TweenMax.to(this.$('#js-left-curtain'), 1, {
        left: '-50%'
      });
      this.curtainTween2 = TweenMax.to(this.$('#js-right-curtain'), 1, {
        left: '100%',
        onStart: StatSocial.helpers.bind(this.scrollStart, this),
        onReverseComplete: StatSocial.helpers.bind(this.scrollReverseStart, this)
      });
      start = 1;
      dur = this.frameDurationTime;
      this.startPoints.push({
        start: start,
        delay: 0,
        dur: 1
      });
      this.controller.addTween(start, this.curtainTween2, dur);
      this.rightPeelTween = TweenMax.to(this.$('#js-right-peel, #js-right-peel-gradient'), 1, {
        css: {
          width: '100%'
        }
      });
      this.controller.addTween(start, this.rightPeelTween, dur);
      this.curtainTextTween2 = TweenMax.to(this.$('#js-quo-curtain'), 1, {
        css: {
          left: '-100%'
        }
      });
      this.controller.addTween(start, this.curtainTextTween2, dur);
      start = start + dur;
      dur = this.frameDurationTime;
      this.controller.addTween(start, this.curtainTween1, dur);
      this.leftPeelTween = TweenMax.to(this.$('#js-left-peel, #js-left-peel-gradient'), 1, {
        css: {
          width: '100%'
        }
      });
      this.controller.addTween(start, this.leftPeelTween, this.frameDurationTime);
      start = start + dur - this.frameDurationTime;
      dur = this.frameDurationTime;
      this.groundTween = TweenMax.to(this.$ground, 1, {
        css: {
          y: 0
        }
      });
      this.controller.addTween(start, this.groundTween, dur);
      this.bgTween = TweenMax.to(this.$('#js-bg'), 1, {
        css: {
          opacity: 1
        }
      });
      this.controller.addTween(start, this.bgTween, dur);
      start = start + dur;
      dur = 1;
      $clouds = this.$('.cloud-b');
      this.cloudTween = TweenMax.to($clouds, 1, {
        onComplete: (function() {
          return $clouds.addClass('is-anima');
        }),
        onReverseComplete: (function() {
          return $clouds.removeClass('is-anima');
        })
      });
      this.controller.addTween(start, this.cloudTween, dur);
      start = start + dur + (this.frameDurationTime / 2);
      dur = this.frameDurationTime;
      $buildings = this.$('.building-b');
      for (i = _i = 0, _ref = $buildings.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        $el = $($buildings.eq(i));
        this.controller.addTween(start - (($buildings.length - i) * (this.frameDurationTime / $buildings.length)), TweenMax.to($el, .1, {
          css: {
            y: 0,
            bottom: 145
          },
          onComplete: (function() {
            var _this = this;

            this.target.addClass('is-show-label is-tip bounce-eff').removeClass('is-hide-label');
            return setTimeout((function() {
              return _this.target.addClass('is-hide-label');
            }), 3990);
          }),
          onReverseComplete: (function() {
            return this.target.removeClass('is-show-label is-tip bounce-eff');
          })
        }), dur);
      }
      this.curtainTextTween2 = TweenMax.to(this.$('.underline-text'), 1, {
        css: {
          top: '-25%'
        },
        onReverseComplete: (function() {
          return _this.$('.underline-text').css({
            'top': '50%'
          });
        }),
        onUpdate: StatSocial.helpers.bind(this.onBuildingsUpdate, this)
      });
      this.controller.addTween(start - (this.frameDurationTime / 10), this.curtainTextTween2, dur);
      start = start + dur - (this.frameDurationTime / 1.5);
      dur = 3 * this.frameDurationTime;
      this.startPoints.push({
        start: start + (this.frameDurationTime - (this.frameDurationTime / 10)),
        delay: 3000,
        dur: 3
      });
      this.$moon = this.$('#js-moon');
      it = this;
      this.$plane1Inner = this.$plane1.find('#js-plane-inner');
      planeTween1 = TweenMax.to(this.$plane1, 1, {
        left: '-100%',
        onUpdate: function() {
          var method, p, _ref1;

          if ((_ref1 = this.oldP) == null) {
            this.oldP = -999;
          }
          p = planeTween1.progress();
          method = this.oldP > p ? 'addClass' : 'removeClass';
          it.$plane1Inner[method]('is-flip');
          return this.oldP = p;
        }
      });
      this.controller.addTween(start, planeTween1, dur);
      start = start + dur - 2 * this.frameDurationTime;
      dur = this.frameDurationTime;
      $bushes = $('.curtain3--bush-lh');
      for (i = _j = 0, _len = $bushes.length; _j < _len; i = ++_j) {
        bush = $bushes[i];
        $bush = $(bush);
        this.controller.addTween(start, TweenMax.to($bush, .75, {
          scale: 1
        }), dur);
      }
      this.$yAxes = this.$('#js-roller-y');
      this.$yAxesArrow = this.$('#js-axes-arrow-y');
      this.$xAxes = this.$('#js-roller-x');
      this.$xAxesArrow = this.$('#js-axes-arrow-x');
      this.$rollerLine1 = this.$('#js-roller-line1');
      this.$rollerLine2 = this.$('#js-roller-line2');
      this.rollerLine1 = this.$rollerLine1[0];
      this.rollerLine2 = this.$rollerLine2[0];
      if (StatSocial.helpers.isIE()) {
        this.rollerLine1.setAttribute('marker-mid', 'none');
      }
      this.$rollerLineBg2 = this.$('#js-roller-line-bg2');
      this.$rollerLineBg1 = this.$('#js-roller-line-bg1');
      this.$rollerLineBg4 = this.$('#js-roller-line-bg4');
      this.$rollerLineBg3 = this.$('#js-roller-line-bg3');
      this.$horizontalPattern = this.$('#js-check-horizontal-pattern');
      this.$horizontalPatternDouble = this.$('#js-check-horizontal-pattern-double');
      this.$rollerCabin1 = this.$('#js-roller-cabin1');
      this.$rollerCabinParent1 = this.$rollerCabin1.parent();
      this.$rollerCabin2 = this.$('#js-roller-cabin2');
      this.$rollerCabinParent2 = this.$rollerCabin2.parent();
      this.$rollerCabin3 = this.$('#js-roller-cabin3');
      this.$rollerCabinParent3 = this.$rollerCabin3.parent();
      this.$markerCircle = this.$('#js-marker-circle');
      this.$rollerCabin4 = this.$('#js-roller-cabin4');
      this.$rollerCabinParent4 = this.$rollerCabin4.parent();
      this.$rollerCabin5 = this.$('#js-roller-cabin5');
      this.$rollerCabinParent5 = this.$rollerCabin5.parent();
      this.$rollerCabin6 = this.$('#js-roller-cabin6');
      this.$rollerCabinParent6 = this.$rollerCabin6.parent();
      this.$rollerCabin7 = this.$('#js-roller-cabin7');
      this.$rollerCabinParent7 = this.$rollerCabin7.parent();
      this.$ferrisWheel = this.$('#js-ferris-wheel');
      this.$rollerText = this.$('#js-roller-text');
      this.rollerLine2Length = this.rollerLine2.getTotalLength();
      this.rollerText = this.$rollerText[0];
      this.rollerTextOffset = parseInt(this.rollerText.getAttribute('startOffset'), 10);
      this.rollerAxesTween = TweenMax.to({}, 1, {
        onUpdate: StatSocial.helpers.bind(this.onRollerAxesUpdate, this)
      });
      this.controller.addTween(start, this.rollerAxesTween, dur);
      this.rollerAxesArrowTween = TweenMax.to({}, 1, {
        onUpdate: StatSocial.helpers.bind(this.onRollerAxesArrowsUpdate, this)
      });
      this.controller.addTween(start, this.rollerAxesArrowTween, dur);
      this.prepareBuildingLine(1);
      this.prepareBuildingLine(2);
      start = start + dur - this.frameDurationTime;
      dur = 3 * this.frameDurationTime;
      this.rollerRailsTween1 = TweenMax.to({
        y: 500
      }, .75, {
        y: 0,
        onUpdate: StatSocial.helpers.bind(this.onRollerRails1Update, this)
      });
      this.controller.addTween(start, this.rollerRailsTween1, dur);
      this.rollerRailsTween2 = TweenMax.to({
        y: 500
      }, 1, {
        y: 0,
        onUpdate: StatSocial.helpers.bind(this.onRollerRails2Update, this)
      });
      this.controller.addTween(start, this.rollerRailsTween2, dur);
      start = start + dur;
      dur = this.frameDurationTime;
      this.gridSimplifyTween = TweenMax.to({
        x: 0
      }, 1, {
        x: 1300,
        onUpdate: StatSocial.helpers.bind(this.onGridSimplifyUpdate, this)
      });
      this.controller.addTween(start, this.gridSimplifyTween, dur);
      this.lineSimplifyTween = TweenMax.to({
        curve: 0
      }, 1, {
        curve: 40,
        onUpdate: StatSocial.helpers.bind(this.onLineSimplifyUpdate, this)
      });
      this.controller.addTween(start, this.lineSimplifyTween, dur);
      this.axesSimplifyTween = TweenMax.to(this.$('#js-roller-x, #js-roller-y, #js-axes-arrow-x, #js-axes-arrow-y'), 1, {
        opacity: 0
      });
      this.controller.addTween(start, this.axesSimplifyTween, dur);
      start = start + dur;
      dur = 3 * this.frameDurationTime;
      this.startPoints.push({
        start: start + this.frameDurationTime - (this.frameDurationTime / 8),
        delay: 3000,
        dur: 3
      });
      this.rollerTextTween = TweenMax.to({
        offset: this.rollerLine2.getTotalLength()
      }, 1, {
        offset: this.rollerTextOffset,
        onUpdate: StatSocial.helpers.bind(this.onRollerTextUpdate, this),
        onStart: function() {
          return _this.showTrain1();
        }
      });
      this.controller.addTween(start, this.rollerTextTween, dur);
      start = start + dur - (this.frameDurationTime / 2);
      dur = 1;
      this.rollerCabinsTriggerTween = TweenMax.to({}, 1, {
        onComplete: (function() {
          _this.initRollerCabins();
          return _this.showTrain2();
        }),
        onReverseComplete: (function() {
          var _ref1, _ref2;

          if ((_ref1 = _this.rollerCabinsTween) != null) {
            _ref1.pause();
          }
          if ((_ref2 = _this.rollerCabinsTween2) != null) {
            _ref2.pause();
          }
          return _this.hideTrain2();
        })
      });
      this.controller.addTween(start, this.rollerCabinsTriggerTween, dur);
      start = start + dur - this.frameDurationTime;
      dur = 1;
      this.carouselTriggerTween = TweenMax.to({}, 1, {
        onComplete: (function() {
          _this.$scence3.addClass('is-show-carousel');
          return setTimeout((function() {
            return _this.$carousel.addClass('is-open');
          }), 10);
        }),
        onReverseComplete: function() {
          _this.$carousel.removeClass('is-open');
          return setTimeout((function() {
            return _this.$scence3.removeClass('is-show-carousel');
          }), 100);
        }
      });
      this.controller.addTween(start, this.carouselTriggerTween, dur);
      start = start + dur;
      dur = 3 * this.frameDurationTime;
      this.startPoints.push({
        start: start + (0.95 * this.frameDurationTime),
        delay: 4000,
        dur: 1
      });
      it = this;
      this.$plane2Inner = this.$plane2.find('#js-plane-inner');
      planeTween2 = TweenMax.to(this.$plane2, 1, {
        left: '100%',
        onUpdate: function() {
          var method, p, _ref1;

          if ((_ref1 = this.oldP) == null) {
            this.oldP = 999;
          }
          p = planeTween2.progress();
          method = this.oldP < p ? 'addClass' : 'removeClass';
          it.$plane2Inner[method]('is-flip');
          return this.oldP = p;
        }
      });
      this.controller.addTween(start, planeTween2, dur);
      start = start + dur - (2 * this.frameDurationTime);
      dur = 1;
      this.ferrisWheelTriggerTween = TweenMax.to({}, 1, {
        onComplete: (function() {
          _this.$scence3.addClass('is-show-ferris-wheel');
          return setTimeout((function() {
            return _this.$ferrisWheel.addClass('is-open');
          }), 10);
        }),
        onReverseComplete: function() {
          _this.$ferrisWheel.removeClass('is-open');
          return setTimeout((function() {
            return _this.$scence3.removeClass('is-show-ferris-wheel');
          }), 100);
        }
      });
      this.controller.addTween(start, this.ferrisWheelTriggerTween, dur);
      start = start + dur + this.frameDurationTime;
      dur = 3 * this.frameDurationTime;
      this.startPoints.push({
        start: start + (this.frameDurationTime / 1.5),
        delay: 3000,
        dur: 1
      });
      this.ferrisText = this.$('#js-ferris-text')[0];
      this.ferrisTextPath = this.$('#ferris-script')[0];
      this.ferrisTextTween = TweenMax.to({
        offset: 2300
      }, 1, {
        offset: 100,
        onUpdate: StatSocial.helpers.bind(this.onFerrisTextUpdate, this)
      });
      this.controller.addTween(start, this.ferrisTextTween, dur);
      start = start + dur - (1.5 * this.frameDurationTime);
      dur = this.frameDurationTime;
      this.moonTween = TweenMax.to(this.$moon, 1, {
        x: 0,
        y: 0
      });
      this.controller.addTween(start, this.moonTween, dur);
      $cloudParts = this.$('.cloud-b > *');
      $iconBanner = $('.icon-banner');
      this.controller.addTween(start, TweenMax.to(this.$('.cabin--base, .icon-banner'), 1, {
        backgroundColor: '#f2d577'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('#js-bg'), 1, {
        backgroundColor: '#095273'
      }), dur);
      this.controller.addTween(start, TweenMax.to($cloudParts, 1, {
        backgroundColor: '#4b99bd',
        onStart: (function() {
          $cloudParts.addClass('no-transition-g-i');
          return $iconBanner.addClass('no-transition-g-i');
        }),
        onReverseComplete: (function() {
          $cloudParts.removeClass('no-transition-g-i');
          return $iconBanner.removeClass('no-transition-g-i');
        })
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.building-b'), 1, {
        backgroundColor: '#13688d'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.human'), 1, {
        backgroundColor: '#153750'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.bush-b > .part-be'), 1, {
        backgroundColor: '#70bb69'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.bush-b.is-light > .part-be'), 1, {
        backgroundColor: '#55d38c'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.ribbon-b, .ribbon-b > .rope-be, .ribbon-b > .rope2-be'), 1, {
        backgroundColor: '#6ab4d7'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.ribbon-b > .text-be'), 1, {
        color: '#ffffff'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.ribbon-b > .tale-be'), 1, {
        borderTopColor: '#6ab4d7'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.ribbon-b > .tale2-be'), 1, {
        borderBottomColor: '#6ab4d7'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.building-b > .tip-be'), 1, {
        borderBottomColor: '#18688d'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.line, .check-pattern'), 1, {
        stroke: '#1b7daa'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.line1, .check-pattern1'), 1, {
        stroke: '#2590be'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.marker-circle'), 1, {
        fill: '#2590be'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.svg-cabin-wheel'), 1, {
        fill: '#13527b'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.svg-cabin-base'), 1, {
        fill: '#237ca6'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.svg-cabin-base2'), 1, {
        fill: '#3f98c2'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.svg-cabin-base3'), 1, {
        fill: '#1c7691'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$('.svg-cabin-human'), 1, {
        fill: '#153750'
      }), dur);
      this.controller.addTween(start, TweenMax.to(this.$ground, 1, {
        backgroundColor: '#333040'
      }), dur);
      start = start + dur;
      dur = this.frameDurationTime;
      this.startPoints.push({
        start: start,
        delay: 1000,
        dur: 1
      });
      this.moonTween = TweenMax.to($('.moon-n-text--side'), 1, {
        y: -60,
        opacity: 0
      });
      this.moonOpacityTween = TweenMax.to($('.moon--chart'), 1, {
        opacity: 0
      });
      this.controller.addTween(start, this.moonTween, dur);
      this.controller.addTween(start, this.moonOpacityTween, dur);
      start = start + dur - (this.frameDurationTime / 2);
      dur = 3 * this.frameDurationTime;
      it = this;
      this.$plane3Inner = this.$plane3.find('#js-plane-inner');
      planeTween3 = TweenMax.to(this.$plane3, 1, {
        left: '-100%',
        onUpdate: function() {
          var method, p, _ref1;

          if ((_ref1 = this.oldP) == null) {
            this.oldP = -999;
          }
          p = planeTween3.progress();
          method = this.oldP > p ? 'addClass' : 'removeClass';
          it.$plane3Inner[method]('is-flip');
          return this.oldP = p;
        }
      });
      this.controller.addTween(start, planeTween3, dur);
      start = start + dur - (2 * this.frameDurationTime);
      dur = this.frameDurationTime;
      this.startPoints.push({
        start: start - (this.frameDurationTime / 16),
        delay: 3000,
        dur: 1
      });
      this.entranceTween = TweenMax.to(this.$('#js-entrance'), 1, {
        y: 0
      });
      this.controller.addTween(start, this.entranceTween, dur);
      start = start + dur - (this.frameDurationTime / 2);
      dur = this.frameDurationTime;
      this.$baloonsLayer1 = this.$('.js-baloon__layer1');
      this.$baloonsLayer2 = this.$('.js-baloon__layer2');
      this.$baloonsLayer3 = this.$('.js-baloon__layer3');
      this.baloonsTween1 = TweenMax.to(this.$baloonsLayer1, 1, {
        marginTop: 0,
        onUpdate: StatSocial.helpers.bind(this.onBaloonsUpdate1, this)
      });
      this.controller.addTween(start, this.baloonsTween1, dur);
      this.baloonsTween2 = TweenMax.to(this.$baloonsLayer2, 1, {
        marginTop: 0,
        onUpdate: StatSocial.helpers.bind(this.onBaloonsUpdate2, this)
      });
      this.controller.addTween(start + (this.frameDurationTime / 6), this.baloonsTween2, dur);
      this.baloonsTween3 = TweenMax.to(this.$baloonsLayer3, 1, {
        marginTop: 0,
        onUpdate: StatSocial.helpers.bind(this.onBaloonsUpdate3, this)
      });
      this.controller.addTween(start + (this.frameDurationTime / 8), this.baloonsTween3, dur);
      this.groundKonfettiTween = TweenMax.to(this.$('#js-ground-confetti'), 1, {
        opacity: 1
      });
      this.controller.addTween(start, this.groundKonfettiTween, dur);
      start = start + dur;
      dur = 1;
      $animas = this.$('.anima-fork');
      this.logosTriggerTween = TweenMax.to({}, 1, {
        onComplete: (function() {
          var anima, _k, _len1, _results;

          _results = [];
          for (i = _k = 0, _len1 = $animas.length; _k < _len1; i = ++_k) {
            anima = $animas[i];
            if (i === 0) {
              _results.push($(anima).show());
            } else {
              _results.push((function(anima) {
                return setTimeout(function() {
                  return $(anima).show();
                }, (StatSocial.helpers.getRand(0, 150)) * 10);
              })(anima));
            }
          }
          return _results;
        }),
        onReverseComplete: (function() {
          return $animas.hide();
        })
      });
      this.controller.addTween(start, this.logosTriggerTween, dur);
      start = start - (this.frameDurationTime / 5);
      dur = 3 * this.frameDurationTime;
      it = this;
      this.$plane4Inner = this.$plane4.find('#js-plane-inner');
      planeTween4 = TweenMax.to(this.$plane4, 1, {
        left: '100%',
        onUpdate: function() {
          var method, p, _ref1;

          if ((_ref1 = this.oldP) == null) {
            this.oldP = 999;
          }
          p = planeTween4.progress();
          method = this.oldP < p ? 'addClass' : 'removeClass';
          it.$plane4Inner[method]('is-flip');
          return this.oldP = p;
        }
      });
      this.controller.addTween(start, planeTween4, dur);
      start = start + dur - (2 * this.frameDurationTime);
      dur = this.frameDurationTime;
      this.startPoints.push({
        start: start,
        delay: 3000,
        dur: 3
      });
      this.ticketsTween = TweenMax.to($tickets, 1, {
        y: 0
      });
      this.controller.addTween(start, this.ticketsTween, dur);
      start = start + dur - (this.frameDurationTime / 2);
      dur = this.frameDurationTime;
      this.startPoints.push({
        start: start + this.frameDurationTime,
        delay: 3,
        dur: 1
      });
      this.ticket1 = TweenMax.to($ticket1, 1, {
        rotation: -20,
        y: -20,
        x: -50
      });
      this.controller.addTween(start, this.ticket1, dur);
      this.clip = TweenMax.to($clip, 1, {
        rotation: -3,
        y: 56,
        x: -70
      });
      this.controller.addTween(start, this.clip, dur);
      this.ticket2 = TweenMax.to($ticket2, 1, {
        rotation: -10,
        onUpdate: StatSocial.helpers.bind(this.onTicket2Update, this)
      });
      return this.controller.addTween(start, this.ticket2, dur);
    };

    App.prototype.onTicket2Update = function() {
      if (this.ticket2.progress() < 1) {
        if (!this.isReverseEnd) {
          this.isReverseEnd = true;
          return this.scrollReverseEnd();
        }
      } else {
        this.scrollEnd();
        return this.isReverseEnd = false;
      }
    };

    App.prototype.onBaloonsUpdate1 = function() {
      if (this.baloonsTween1.totalProgress() >= 1) {
        return this.$baloonsLayer1.addClass('oscillate-eff');
      } else {
        return this.$baloonsLayer1.removeClass('oscillate-eff');
      }
    };

    App.prototype.onBaloonsUpdate2 = function() {
      if (this.baloonsTween2.totalProgress() >= 1) {
        return this.$baloonsLayer2.addClass('oscillate2-eff');
      } else {
        return this.$baloonsLayer2.removeClass('oscillate2-eff');
      }
    };

    App.prototype.onBaloonsUpdate3 = function() {
      if (this.baloonsTween3.totalProgress() >= 1) {
        return this.$baloonsLayer3.addClass('oscillate3-eff');
      } else {
        return this.$baloonsLayer3.removeClass('oscillate3-eff');
      }
    };

    App.prototype.onFerrisTextUpdate = function() {
      var pathProgress;

      pathProgress = this.ferrisTextTween.target.offset;
      return this.ferrisText.setAttribute('startOffset', "" + this.ferrisTextTween.target.offset);
    };

    App.prototype.onLineSimplifyUpdate = function() {
      if (this.lineSimplifyTween.totalProgress() > 0) {
        this.$markerCircle[0].setAttribute('class', 'marker-circle is-no-stroke');
      } else {
        this.$markerCircle[0].setAttribute('class', 'marker-circle');
      }
      return this.setLiveLinesCurve(this.lineSimplifyTween.target.curve);
    };

    App.prototype.onGridSimplifyUpdate = function() {
      this.$horizontalPattern.attr('transform', "translate(-" + this.gridSimplifyTween.target.x + ",0)");
      return this.$horizontalPatternDouble.attr('transform', "translate(-" + this.gridSimplifyTween.target.x + ",0)");
    };

    App.prototype.onRollerRails1Update = function() {
      if (this.rollerRailsTween1.totalProgress() < 1) {
        this.hideTrain1();
      }
      this.$rollerLine1.attr('transform', "translate(0," + this.rollerRailsTween1.target.y + ")");
      this.setLiveLinesProgress(this.rollerRailsTween1.totalProgress());
      this.$rollerLineBg1.attr('transform', "translate(0," + this.rollerRailsTween1.target.y + ")");
      return this.$rollerLineBg3.attr('transform', "translate(0," + this.rollerRailsTween1.target.y + ")");
    };

    App.prototype.onRollerRails2Update = function() {
      this.$rollerLine2.attr('transform', "translate(0," + this.rollerRailsTween2.target.y + ")");
      this.$rollerLineBg2.attr('transform', "translate(0," + this.rollerRailsTween2.target.y + ")");
      return this.$rollerLineBg4.attr('transform', "translate(0," + this.rollerRailsTween2.target.y + ")");
    };

    App.prototype.setLiveLinesProgress = function(progress) {
      var point, _i, _j, _len, _len1, _ref, _ref1;

      _ref = this.livePoints1;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        point.setProgress(progress);
      }
      _ref1 = this.livePoints2;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        point = _ref1[_j];
        point.setProgress(progress);
      }
      return this.updateLine();
    };

    App.prototype.setLiveLinesCurve = function(curve) {
      var point, _i, _j, _len, _len1, _ref, _ref1;

      _ref = this.livePoints1;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        point.curve = curve;
      }
      _ref1 = this.livePoints2;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        point = _ref1[_j];
        point.curve = curve;
      }
      return this.updateLine();
    };

    App.prototype.prepareBuildingLine = function(num) {
      var a, b, d, i, point, points, start, _i, _j, _k, _len, _len1, _len2, _results;

      start = 9 * this.frameDurationTime;
      d = this["$rollerLine" + num].attr('d');
      d = d.replace(/m/gi, '');
      d = d.replace(/(\d)()(\-)/gi, '$1,$3');
      a = d.split(/l|\,|\s/gi);
      b = [];
      for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
        point = a[i];
        (point !== '') && b.push(point);
      }
      points = [];
      for (i = _j = 0, _len1 = b.length; _j < _len1; i = _j += 2) {
        point = b[i];
        points.push({
          x: parseInt(b[i], 10),
          y: parseInt(b[i + 1], 10),
          i: i,
          isFixed: i === 0 || i === b.length - 2
        });
      }
      this["livePoints" + num] = [];
      _results = [];
      for (_k = 0, _len2 = points.length; _k < _len2; _k++) {
        point = points[_k];
        _results.push(this["livePoints" + num].push(new window.StatSocial.RollerPoint(point)));
      }
      return _results;
    };

    App.prototype.updateLine = function() {
      this.serializeLine(1);
      return this.serializeLine(2);
    };

    App.prototype.serializeLine = function(num) {
      var char, i, lastPoint, point, str, _i, _len, _ref;

      str = 'M';
      lastPoint = {};
      _ref = this["livePoints" + num];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        point = _ref[i];
        char = i !== 0 ? 'S' : '';
        str += "" + char + (point.x - point.curve) + "," + point.y + " " + (point.x + point.curve) + "," + point.y;
        lastPoint = point;
      }
      this["$rollerLine" + num].attr('d', str);
      str += "L" + lastPoint.x + ",1300 L0,1300 z";
      this["$rollerLineBg" + num].attr('d', str);
      return this["$rollerLineBg" + (num + 2)].attr('d', str);
    };

    App.prototype.initRollerCabins = function() {
      if (!this.rollerCabinsTween) {
        this.rollerCabinsTween = TweenMax.to({
          p: this.rollerLine2Length
        }, 6, {
          p: -110,
          delay: 2,
          repeatDelay: 3,
          repeat: -1,
          onUpdate: StatSocial.helpers.bind(this.onRollerCabinsUpdate, this)
        });
      } else {
        this.rollerCabinsTween.resume();
      }
      if (!this.rollerCabinsTween2) {
        return this.rollerCabinsTween2 = TweenMax.to({
          p: this.rollerLine2Length
        }, 6, {
          p: -110,
          repeatDelay: 3,
          repeat: -1,
          onUpdate: StatSocial.helpers.bind(this.onRollerCabinsUpdate2, this)
        });
      } else {
        return this.rollerCabinsTween2.resume();
      }
    };

    App.prototype.onRollerCabinsUpdate2 = function() {
      var info1, info2, info3, info4, pathProgress;

      pathProgress = this.rollerCabinsTween2.target.p;
      info1 = this.getRollerPathInfo(pathProgress + 10, true);
      info2 = this.getRollerPathInfo(pathProgress + 50, true);
      info3 = this.getRollerPathInfo(pathProgress + 90, true);
      info4 = this.getRollerPathInfo(pathProgress + 130, true);
      this.$rollerCabinParent4.attr('transform', "translate(" + (info1.point.x - 22) + ", " + (info1.point.y - 25) + ") rotate(" + (info1.degree || 0) + ", 22, 21)");
      this.$rollerCabinParent5.attr('transform', "translate(" + (info2.point.x - 22) + ", " + (info2.point.y - 25) + ") rotate(" + (info2.degree || 0) + ", 22, 21)");
      this.$rollerCabinParent6.attr('transform', "translate(" + (info3.point.x - 22) + ", " + (info3.point.y - 25) + ") rotate(" + (info3.degree || 0) + ", 22, 21)");
      return this.$rollerCabinParent7.attr('transform', "translate(" + (info4.point.x - 22) + ", " + (info4.point.y - 25) + ") rotate(" + (info4.degree || 0) + ", 22, 21)");
    };

    App.prototype.onRollerCabinsUpdate = function() {
      var info1, info2, info3, pathProgress;

      pathProgress = this.rollerCabinsTween.target.p;
      info1 = this.getRollerPathInfo(pathProgress + 10);
      info2 = this.getRollerPathInfo(pathProgress + 50);
      info3 = this.getRollerPathInfo(pathProgress + 90);
      this.$rollerCabinParent1.attr('transform', "translate(" + (info1.point.x - 22) + ", " + (info1.point.y - 25) + ") rotate(" + (info1.degree || 0) + ", 22, 21)");
      this.$rollerCabinParent2.attr('transform', "translate(" + (info2.point.x - 22) + ", " + (info2.point.y - 25) + ") rotate(" + (info2.degree || 0) + ", 22, 21)");
      return this.$rollerCabinParent3.attr('transform', "translate(" + (info3.point.x - 22) + ", " + (info3.point.y - 25) + ") rotate(" + (info3.degree || 0) + ", 22, 21)");
    };

    App.prototype.hideTrain1 = function() {
      if (!this.isFirstTrainHide) {
        this.$rollerCabinParent1.fadeOut();
        this.$rollerCabinParent2.fadeOut();
        this.$rollerCabinParent3.fadeOut();
        return this.isFirstTrainHide = true;
      }
    };

    App.prototype.showTrain1 = function() {
      if (this.isFirstTrainHide) {
        this.$rollerCabinParent1.fadeIn();
        this.$rollerCabinParent2.fadeIn();
        this.$rollerCabinParent3.fadeIn();
        return this.isFirstTrainHide = false;
      }
    };

    App.prototype.hideTrain2 = function() {
      if (!this.isSecondTrainHide) {
        this.$rollerCabinParent4.fadeOut();
        this.$rollerCabinParent5.fadeOut();
        this.$rollerCabinParent6.fadeOut();
        this.$rollerCabinParent7.fadeOut();
        return this.isSecondTrainHide = true;
      }
    };

    App.prototype.showTrain2 = function() {
      if (this.isSecondTrainHide) {
        this.$rollerCabinParent4.fadeIn();
        this.$rollerCabinParent5.fadeIn();
        this.$rollerCabinParent6.fadeIn();
        this.$rollerCabinParent7.fadeIn();
        return this.isSecondTrainHide = false;
      }
    };

    App.prototype.onRollerTextUpdate = function() {
      var info1, info2, info3, pathProgress;

      pathProgress = this.rollerTextTween.target.offset;
      if (pathProgress > 100) {
        info1 = this.getRollerPathInfo(pathProgress - 20);
        info2 = this.getRollerPathInfo(pathProgress - 60);
        info3 = this.getRollerPathInfo(pathProgress - 100);
        this.$rollerCabinParent1.attr('transform', "translate(" + (info1.point.x - 22) + ", " + (info1.point.y - 25) + ") rotate(" + (info1.degree || 0) + ", 22, 21)");
        this.$rollerCabinParent2.attr('transform', "translate(" + (info2.point.x - 22) + ", " + (info2.point.y - 25) + ") rotate(" + (info2.degree || 0) + ", 22, 21)");
        this.$rollerCabinParent3.attr('transform', "translate(" + (info3.point.x - 22) + ", " + (info3.point.y - 25) + ") rotate(" + (info3.degree || 0) + ", 22, 21)");
      }
      return this.rollerText.setAttribute('startOffset', "" + this.rollerTextTween.target.offset);
    };

    App.prototype.getRollerPathInfo = function(progress, isSecondLine) {
      var cathetus, degree, hypotenuse, line, point, prevPoint, returnObj;

      line = !isSecondLine ? this.rollerLine2 : this.rollerLine1;
      point = line.getPointAtLength(progress);
      prevPoint = line.getPointAtLength(progress - 2);
      cathetus = point.x - prevPoint.x;
      hypotenuse = Math.sqrt(Math.pow(point.x - prevPoint.x, 2) + Math.pow(point.y - prevPoint.y, 2));
      degree = Math.acos(cathetus / hypotenuse) * (180 / Math.PI);
      if ((point.y - prevPoint.y) < 0) {
        degree = -degree;
      }
      return returnObj = {
        degree: degree,
        point: point
      };
    };

    App.prototype.onRollerAxesUpdate = function() {
      var progress;

      progress = this.rollerAxesTween.totalProgress();
      this.$yAxes.attr('transform', "translate(0," + (570 - (550 * progress)) + ")");
      return this.$xAxes.attr('transform', "translate(" + (-1240 + (1240 * progress)) + ",0)");
    };

    App.prototype.onRollerAxesArrowsUpdate = function() {
      var progress;

      progress = this.rollerAxesTween.totalProgress();
      this.$yAxesArrow.attr('transform', "translate(2.5," + (552 - (550 * progress)) + ")");
      return this.$xAxesArrow.attr('transform', "translate(" + (-32 + (1240 * progress)) + ",482) rotate(90,11,21)");
    };

    App.prototype.setPlaneText = function(text) {
      if (this.currPlaneText !== text) {
        this.$planeText.text(text);
        return this.currPlaneText = text;
      }
    };

    App.prototype.$ = function(selector) {
      return this.$main.find(selector);
    };

    App.prototype.onCurtain1Update = function() {
      if (this.curtainTween1.totalProgress() >= 1) {
        this.isFirstCurtainParallax && this.$scence.parallax('disable');
        this.isFirstCurtainParallax = false;
        return this.$scence.hide();
      } else {
        !this.isFirstCurtainParallax && this.$scence.parallax('enable');
        this.isFirstCurtainParallax = true;
        return this.$scence.show();
      }
    };

    App.prototype.onCurtain2Update = function() {
      if (this.$left.offset().left !== 0) {
        this.$script2.css({
          left: Math.max(this.$left.offset().left + this.$left.outerWidth(), this.$window.outerWidth() / 2 - this.$script2.outerWidth() / 2 - 20)
        });
      }
      if (this.curtain2LeftTween.totalProgress() >= 1) {
        this.isSecondCurtainParallax && this.$scence2.parallax('disable');
        this.isSecondCurtainParallax = false;
        this.$left.hide();
        return this.$right.hide();
      } else {
        !this.isSecondCurtainParallax && this.$scence2.parallax('enable');
        this.isSecondCurtainParallax = true;
        this.$left.show();
        return this.$right.show();
      }
    };

    App.prototype.onCurtain2UpdateEnd = function() {
      if (this.scriptTween3.totalProgress() >= 1) {
        return this.$scence2.hide();
      } else {
        return this.$scence2.show();
      }
    };

    return App;

  })();

  new App;

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
