// Generated by CoffeeScript 1.6.2
(function() {
  var App;

  App = (function() {
    function App() {
      this.vars();
      this.initScroll();
      this.initController();
      this.buildAnimations();
      this.initParallax();
    }

    App.prototype.vars = function() {
      this.$main = $('#js-main');
      this.$body = $(document.body);
      this.scrollPos = 0;
      this.$window = $(window);
      this.$window.height();
      this.frameDurationTime = 2500;
      this.$mainLogo = this.$('#js-main-logo');
      this.$script1 = this.$('#js-script1');
      this.$script2 = this.$('#js-script2');
      this.$scence = this.$('#js-curtain1');
      return this.$scence2 = this.$('#js-curtain2');
    };

    App.prototype.initController = function() {
      return this.controller = $.superscrollorama({
        triggerAtCenter: false,
        playoutAnimations: true
      });
    };

    App.prototype.initScroll = function() {
      var it;

      this.scroller = new IScroll('#js-main', {
        probeType: 3,
        mouseWheel: true
      });
      document.addEventListener('touchmove', (function(e) {
        return e.preventDefault();
      }), false);
      it = this;
      this.scroller.on('scroll', function() {
        return it.updateScrollPos(this, it);
      });
      return this.scroller.on('scrollEnd', function() {
        return it.updateScrollPos(this, it);
      });
    };

    App.prototype.initParallax = function() {
      this.$scence.parallax();
      return this.$scence2.parallax();
    };

    App.prototype.updateScrollPos = function(that, it) {
      return it.controller.setScrollContainerOffset(0, -(that.y >> 0)).triggerCheckAnim(true);
    };

    App.prototype.buildAnimations = function() {
      var $el, $images, $leftEls, $rightEls, el, i, rotateDegree, rotateElsCountLeft, start, _i, _j, _k, _len, _len1, _ref, _ref1;

      this.curtainTween1 = TweenMax.to(this.$('.curtain-l'), .75, {
        css: {
          top: '-100%'
        },
        onUpdate: StatSocial.helpers.bind(this.onCurtain1Update, this)
      });
      this.curtainTween2 = TweenMax.to(this.$('.curtain2-l'), .75, {
        css: {
          top: '-22px',
          y: 0
        }
      });
      this.scriptTween1 = TweenMax.to(this.$script1, .75, {
        css: {
          top: '50%',
          opacity: 1
        }
      });
      this.scriptTween12 = TweenMax.to(this.$script1, .75, {
        css: {
          top: '95%'
        }
      });
      this.logoTween = TweenMax.to(this.$mainLogo, .75, {
        css: {
          top: '100%'
        }
      });
      this.$mainLogo.css({
        'top': '50%'
      });
      this.controller.addTween(this.frameDurationTime, this.curtainTween1, this.frameDurationTime);
      this.controller.addTween(this.frameDurationTime, this.curtainTween2, this.frameDurationTime);
      this.controller.addTween(1, this.scriptTween1, this.frameDurationTime / 1.5);
      this.controller.addTween(this.frameDurationTime, this.scriptTween12, this.frameDurationTime / 2);
      this.controller.addTween(this.frameDurationTime, this.logoTween, this.frameDurationTime / 2);
      this.scriptTween2 = TweenMax.to(this.$script2, .75, {
        css: {
          top: '50%'
        }
      });
      this.controller.addTween(this.frameDurationTime, this.scriptTween2, this.frameDurationTime * 1.5);
      $images = this.$scence.find('.curtain-layer-lh');
      for (i = _i = 0, _len = $images.length; _i < _len; i = ++_i) {
        el = $images[i];
        $el = $(el);
        this.controller.addTween(this.frameDurationTime, TweenMax.to($el, .75, {
          css: {
            top: "" + (50 + (i * 5)) + "%"
          }
        }), this.frameDurationTime);
      }
      this.$left = this.$('#js-curtain2-left-side');
      this.$right = this.$('#js-curtain2-right-side');
      $leftEls = this.$left.find('.curtain2-section-lh');
      $rightEls = this.$right.find('.curtain2-section-lh');
      start = 2 * this.frameDurationTime;
      rotateDegree = 5;
      rotateElsCountLeft = Math.min($leftEls.length, 10);
      for (i = _j = _ref = $leftEls.length, _ref1 = $leftEls.length - rotateElsCountLeft; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = _ref <= _ref1 ? ++_j : --_j) {
        $el = $($leftEls.eq(i));
        this.controller.addTween(start - (i * (this.frameDurationTime / $leftEls.length)), TweenMax.to($el, .75, {
          css: {
            rotation: rotateDegree,
            transformOrigin: 'left top'
          }
        }), this.frameDurationTime);
      }
      for (i = _k = 0, _len1 = $rightEls.length; _k < _len1; i = ++_k) {
        el = $rightEls[i];
        $el = $(el);
        this.controller.addTween(start - (($rightEls.length - i) * (this.frameDurationTime / $rightEls.length)), TweenMax.to($el, .75, {
          css: {
            rotation: -rotateDegree,
            transformOrigin: 'right top'
          }
        }), this.frameDurationTime);
      }
      this.curtain2LeftTween = TweenMax.to(this.$left, .75, {
        css: {
          left: -this.$window.outerWidth() / 2
        },
        onUpdate: StatSocial.helpers.bind(this.onCurtain2Update, this)
      });
      this.controller.addTween(start, this.curtain2LeftTween, this.frameDurationTime);
      this.controller.addTween(start, TweenMax.to(this.$right, .75, {
        css: {
          left: (this.$window.outerWidth() / 2) + $rightEls.first().outerWidth()
        }
      }), this.frameDurationTime);
      start = 3.5 * this.frameDurationTime;
      this.groundTween = TweenMax.to(this.$('#js-ground'), .75, {
        css: {
          left: 0
        }
      });
      this.controller.addTween(start, this.groundTween, this.frameDurationTime);
      this.bg = TweenMax.to(this.$('#js-bg'), .75, {
        css: {
          opacity: 1
        }
      });
      return this.controller.addTween(start, this.bg, this.frameDurationTime);
    };

    App.prototype.$ = function(selector) {
      return this.$main.find(selector);
    };

    App.prototype.onCurtain1Update = function() {
      if (this.curtainTween1.totalProgress() >= 1) {
        this.isFirstCurtainParallax && this.$scence.parallax('disable');
        this.isFirstCurtainParallax = false;
        return this.$scence.hide();
      } else {
        !this.isFirstCurtainParallax && this.$scence.parallax('enable');
        this.isFirstCurtainParallax = true;
        return this.$scence.show();
      }
    };

    App.prototype.onCurtain2Update = function() {
      if (this.curtain2LeftTween.totalProgress() >= 1) {
        this.isSecondCurtainParallax && this.$scence2.parallax('disable');
        this.isSecondCurtainParallax = false;
        this.$left.hide();
        return this.$right.hide();
      } else {
        !this.isSecondCurtainParallax && this.$scence2.parallax('enable');
        this.isSecondCurtainParallax = true;
        this.$left.show();
        return this.$right.show();
      }
    };

    return App;

  })();

  new App;

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
